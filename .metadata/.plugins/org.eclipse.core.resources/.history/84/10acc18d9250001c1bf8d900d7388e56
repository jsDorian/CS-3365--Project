package application;

import java.sql.*;
import java.util.ArrayList;

public class OSSManager {
	private Connection usersConn = null;
	private Connection pwdConn = null;
	private Connection bankConn = null;
	private Connection ordersConn = null;
	private Connection catalogConn = null;
	private Connection stockConn = null;
	private User user = null;
	
	private void connectToUsersDb() {
		String addr = "jdbc:sqlite:ossusersdb.db";
		
		Connector connector = new Connector(addr);
		Connection conn = connector.getConnection();
		
		this.usersConn = conn;
	}
	
	private void connectToPwdDb() {
		String addr = "jdbc:sqlite:osspwddb.db";
		
		Connector connector = new Connector(addr);
		Connection conn = connector.getConnection();
		
		this.pwdConn = conn;
	}
	
	private void connectToBankDb() {
		String addr = "jdbc:sqlite:bankusersdb.db";
		
		Connector connector = new Connector(addr);
		Connection conn = connector.getConnection();
		
		this.bankConn = conn;
	}
	
	private void connectToOrdersDb() {
		String addr = "jdbc:sqlite:ordersdb.db";
		
		Connector connector = new Connector(addr);
		Connection conn = connector.getConnection();
		
		this.ordersConn = conn;
	}
	
	private void connectToCatalogDb() {
		// add database driver
		String addr = "jdbc:sqlite:catalogdb.db";
		
		// create db connector and get connection obj
		Connector connector = new Connector(addr);
		Connection conn = connector.getConnection();
		
		this.catalogConn = conn;
	}
	
	private void connectToStockDb() {
		// add database driver
		String addr = "jdbc:sqlite:stockdb.db";
		
		// create db connector and get connection obj
		Connector connector = new Connector(addr);
		Connection conn = connector.getConnection();
		
		this.stockConn = conn;
	}
	
	public void closeConn(Connection[] conn) {
		try {
			for (int i = 0; i < conn.length; i++) {
				conn[i].close();
			}
		} catch (Exception e) {
			System.out.println("closeConn: " + e.getMessage());
		}
	}
	
	public int getUserId(String email) {
		int userId = 0;
		
		try {
			connectToUsersDb();
			connectToPwdDb();
			
			PreparedStatement stmt = this.usersConn.prepareStatement("SELECT * FROM users WHERE Email = ? LIMIT 1");
			stmt.setString(1, email);
			
			ResultSet rs = stmt.executeQuery();
			
			while(rs.next()) {
				userId = rs.getInt("UserId");
			}
			
			rs.close();
			stmt.close();
		} catch (Exception e) {
			System.out.println("getUserId: " + e.getMessage());
		}
		
		return userId;
	}
	
	private String getPwd(int userId) {
		String pwd = null;
		
		try {
			PreparedStatement stmt = this.pwdConn.prepareStatement("SELECT * FROM pwd WHERE UserId = ? LIMIT 1");
			stmt.setInt(1, userId);
			
			ResultSet rs = stmt.executeQuery();
			
			while(rs.next()) {
				pwd = rs.getString("Value");
			}
			
			rs.close();
			stmt.close();
		} catch (Exception e) {
			System.out.println("getPwd: " + e.getMessage());
		}
		
		return pwd;
	}
	
	private User getUser(int userId) {
		User user = null;
		
		try {
			PreparedStatement stmt = this.usersConn.prepareStatement("SELECT * FROM users WHERE UserId = ? LIMIT 1");
			stmt.setInt(1, userId);
			
			ResultSet rs = stmt.executeQuery();
			
			while(rs.next()) {
				String username = rs.getString("Username");
				String name = rs.getString("Name");
				String email = rs.getString("Email");
				String addr = rs.getString("Address");
				int premium = rs.getInt("Premium");
				
				user = new User(userId, name, username, email, premium, addr);
			}
			
			rs.close();
			stmt.close();
			
			closeConn(new Connection[] {this.usersConn, this.pwdConn});
		} catch (Exception e) {
			System.out.println("getUser: " + e.getMessage());
		}
		
		return user;
	}
	
	private void insertStock(int itemId) {
		try {
			connectToStockDb();
			
			PreparedStatement stmt = stockConn.prepareStatement("UPDATE stock SET Value = Value - 1 WHERE ItemId = ?");
			stmt.setInt(1, itemId);
			
			stmt.executeUpdate();
			
			closeConn(new Connection[] {stockConn});
		} catch (Exception e) {
			System.out.println("insertStock: " + e.getMessage());
		}
	}
	
	private void fetchAcct(String name, String email, Order order) {
		BankAcct acct = null;
		
		try {
			connectToBankDb();
			
			PreparedStatement stmt = bankConn.prepareStatement("SELECT * FROM users WHERE Name = (?) AND Email = (?) LIMIT 1");
			stmt.setString(1, name);
			stmt.setString(2, email);
			
			ResultSet rs = stmt.executeQuery();
			
			acct = new BankAcct();
			
			while(rs.next()) {
				acct.balance = rs.getInt("Balance");
				acct.name = rs.getString("Name");
				acct.acct = rs.getInt("AcctNumber");
				acct.email = rs.getString("Email");
			}
			
			if (order.total < acct.balance) {
				acct.balance -= order.total;
				
				insertStock(order.itemId);
				insertAcct(acct);
				insertOrder(order);
			}
			
			closeConn(new Connection[] {bankConn, ordersConn, stockConn});
		} catch (Exception e) {
			System.out.println("fetchAcct: " + e.getMessage());
		}
	}
	
	public void selectAcct(String name, String email, Order order) {
		fetchAcct(name, email, order);
	}
	
	private void updateAcct(BankAcct acct) {
		try {
			connectToBankDb();
			
			PreparedStatement stmt = bankConn.prepareStatement("UPDATE users SET Balance = ? WHERE AcctNumber = ?");
			stmt.setInt(1, acct.balance);
			stmt.setInt(2, acct.acct);
			
			stmt.executeUpdate();
			
			closeConn(new Connection[] {bankConn});
		} catch (Exception e) {
			System.out.println("updateAcct: " + e.getMessage());
			
			try {
				PreparedStatement stmt = bankConn.prepareStatement("INSERT INTO users (Name, Email, AcctNumber, Balance) VALUES (?, ?, ?, ?)");
				stmt.setString(1, acct.name);
				stmt.setString(2, acct.email);
				stmt.setInt(3, acct.acct);
				stmt.setInt(4, acct.balance);
				
				stmt.executeQuery();
				
				closeConn(new Connection[] {bankConn});
			} catch (Exception _e) {}
		}
	}
	
	public void insertAcct(BankAcct acct) {
		updateAcct(acct);
	}
	
	private void updateOrder(Order order) {
		try {
			connectToOrdersDb();
			
			PreparedStatement stmt = ordersConn.prepareStatement("INSERT INTO orders (UserId, Address, ItemId, Amount, Delivery, PickUp, DeliveryFee, Total, Date) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");
			stmt.setInt(1, user.userId);
			stmt.setString(2, order.addr);
			stmt.setInt(3, order.itemId);
			stmt.setInt(4, order.amount);
			stmt.setInt(5, order.delivery);
			stmt.setInt(6, order.pickup);
			stmt.setInt(7, order.deliveryFee);
			stmt.setInt(8, order.total);
			stmt.setString(9, order.date);
			
			stmt.executeUpdate();
			
			closeConn(new Connection[] {ordersConn});
		} catch (Exception e) {
			System.out.println("updateOrder: " + e.getMessage());
		}
	}
	
	public void insertOrder(Order order) {
		updateOrder(order);
	}
	
	private Order fetchOrder(int ordernumber) {
		Order order = null;
		
		try {
			connectToOrdersDb();
			connectToCatalogDb();
			
			PreparedStatement stmt = this.ordersConn.prepareStatement("SELECT * FROM orders WHERE OrderNumber = ? LIMIT 1");
			PreparedStatement stmt1 = this.catalogConn.prepareStatement("SELECT * FROM items WHERE ItemId = ? LIMIT 1");
			stmt.setInt(1, ordernumber);
			
			ResultSet rs = stmt.executeQuery();
			
			while (rs.next()) {
				int orderNumber = rs.getInt("OrderNumber");
				int itemId = rs.getInt("ItemId");
				
				stmt1.setInt(1, itemId);
				ResultSet rs1 = stmt1.executeQuery();
				
				String itemName = rs1.getString("Name");
				int itemPrice = rs1.getInt("Price");
				String date = rs.getString("Date");
				String addr = rs.getString("Address");
				int amount = rs.getInt("Amount");
				int delivery = rs.getInt("Delivery");
				int pickup = rs.getInt("PickUp");
				int deliveryFee = rs.getInt("DeliveryFee");
				int total = rs.getInt("Total");
				
				order = new Order(orderNumber, date, addr, amount, delivery, pickup, deliveryFee, total, itemId, itemName, itemPrice);
			}
			
			closeConn(new Connection[] {catalogConn, ordersConn});
		} catch (Exception e) {
			System.out.println("fetchOrder: " + e.getMessage());
		}
		
		return order;
	}
	
	public Order selectOrder(int ordernumber) {
		return fetchOrder(ordernumber);
	}
	
	private int fetchStock(int itemId) {
		connectToStockDb();
		int result = 0;
		
		try {
			PreparedStatement stmt = this.stockConn.prepareStatement("SELECT * FROM stock WHERE ItemId = ? LIMIT 1");
			stmt.setInt(1, itemId);
			
			ResultSet rs = stmt.executeQuery();
			
			while (rs.next()) {
				result = rs.getInt("Value");
			}
			
			rs.close();
			stmt.close();
			closeConn(new Connection[] {this.stockConn});
		} catch (Exception e) {
			System.out.println("fetchStock: " + e.getMessage());
		}
		
		return result;
	}
	
	public int selectStock(int itemId) {
		return fetchStock(itemId);
	}
	
	private ArrayList<Item> fetchAllItems() {
		ArrayList<Item> items = null;
		
		try {
			connectToCatalogDb();
			
			PreparedStatement stmt = this.catalogConn.prepareStatement("SELECT * FROM items");
			
			ResultSet rs = stmt.executeQuery();
			
			items = new ArrayList<Item>();
			
			while (rs.next()) {
				int itemId = rs.getInt("ItemId");
				String name = rs.getString("Name");
				String desc = rs.getString("Description");
				int price = rs.getInt("Price");
				
				items.add(new Item(itemId, name, desc, price));
			}
			
			catalogConn.close();
		} catch (Exception e) {
			System.out.println("fetchAllItems: " + e.getMessage());
		}
		
		return items;
	}
	
	public ArrayList<Item> selectAllItems() {
		return fetchAllItems();
	}
	
	private ArrayList<Order> fetchAllOrders () {
		ArrayList<Order> orders = null;
		
		try {
			connectToOrdersDb();
			
			PreparedStatement stmt = this.ordersConn.prepareStatement("SELECT * FROM orders WHERE UserId = ?");
			stmt.setInt(1, application.Main.ossmanager.getUserId());
			
			ResultSet rs = stmt.executeQuery();
			
			orders = new ArrayList<Order>();
			
			while (rs.next()) {
				int orderNumber = rs.getInt("OrderNumber");
				String date = rs.getString("Date");
				String addr = rs.getString("Address");
				int amount = rs.getInt("Amount");
				int delivery = rs.getInt("Delivery");
				int pickup = rs.getInt("PickUp");
				int deliveryFee = rs.getInt("DeliveryFee");
				int total = rs.getInt("Total");
				
				orders.add(new Order(orderNumber, date, addr, amount, delivery, pickup, deliveryFee, total));
			}
			
			ordersConn.close();
		} catch (Exception e) {
			System.out.println("fetchAllOrders: " + e.getMessage());
		}
		
		return orders;
	}
	
	public ArrayList<Order> selectAllOrders() {
		return fetchAllOrders();
	}
	
	private void updateUsers(String name, String username, String email, int acct, int premium, String addr) {
		try {
			connectToUsersDb();
			
			PreparedStatement stmt = this.usersConn.prepareStatement("INSERT INTO users (Name, Username, Email, AcctNumber, Premium, Address) VALUES (?, ?, ?, ?, ?, ?)");
			stmt.setString(1, name);
			stmt.setString(2, username);
			stmt.setString(3, email);
			stmt.setInt(4, acct);
			stmt.setInt(5, premium);
			stmt.setString(6, addr);
			stmt.executeUpdate();
			
			closeConn(new Connection[] {usersConn});
		} catch (Exception e) {
			System.out.println("updateUsers: " + e.getMessage());
		}
	}
	
	public void insertUsers(String name, String username, String email, int acct, int premium, String addr) {
		// todo: validate strings
		updateUsers(name, username, email, acct, premium, addr);
	}
	
	private void updatePwd(String pwd) {
		try {
			connectToPwdDb();
			PreparedStatement stmt = pwdConn.prepareStatement("INSERT INTO pwd (Value) VALUES (?)");
			stmt.setString(1, pwd);
			stmt.executeUpdate();
			
			closeConn(new Connection[] {pwdConn});
		} catch (Exception e) {
			System.out.println("updatePwd: " + e.getMessage());
		}
	}
	
	public void insertPwd(String pwd) {
		// todo: validate string
		updatePwd(pwd);
	}
	
	private void updateBank(String name, String email, int acct, int amt) {
		try {
			connectToBankDb();
			
			PreparedStatement stmt = this.bankConn.prepareStatement("INSERT INTO users (Name, Email, AcctNumber, Balance) VALUES (?, ?, ?, ?)");
			stmt.setString(1, name);
			stmt.setString(2, email);
			stmt.setInt(3, acct);
			stmt.setInt(4, amt);
			stmt.executeUpdate();
			
			closeConn(new Connection[] {bankConn});
		} catch (Exception e) {
			System.out.println("updateBank: " + e.getMessage());
		}
	}
	
	public void insertBank(String name, String email, int acct, int amt) {
		// todo: validate strings
		updateBank(name, email, acct, amt);
	}
	
	private boolean authenticate(String email, String pwd) {
		int userId = getUserId(email);
		
		if (pwd.equals(getPwd(userId))) {
			this.user = getUser(userId);
			return true;
		}
		
		return false;
	}
	
	public boolean login(String email, String pwd) {
		if (authenticate(email, pwd)) {
			try {
				usersConn.close();
				pwdConn.close();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
			
			return true;
		}
		
		return false;
	}
	
	public void logout() {
		user.deauth();
		application.Main.login(application.Main.stage);
	}
	
	public int getUserId() {
		return user.userId;
	}
	
	public String getUsername() {
		return user.username;
	}
	
	public String getName() {
		return user.name;
	}
	
	public String getEmail() {
		return user.email;
	}
	
	public boolean getAuth() {
		return user.auth;
	}
	
	public String getAddr() {
		return user.addr;
	}
	
	public int getPremium() {
		return user.premium;
	}
}
